{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","data","item","weather","temperature","temperature_max","temperature_min","icon","humidity","speed","placeName","apiToken","id","getJSON","uri","options","window","fetch","then","res","json","description","main","temp","temp_max","temp_min","wind","method","params","this","setState","event","index","target","dataset","optionIndex","place","getData","name","console","log","Card","class","CardHeader","title","CardActions","handleUpdate","bind","CardContent","React","Component","SelectorView","Autocomplete","getOptionLabel","option","renderInput","TextField","label","variant","style","width","fullWidth","onChange","ListView","formatTemperature","formatTemperature_max","formatTemperature_min","formatHumidity","formatSpeed","path","image","Avatar","src","alt","WbSunny","List","ListItem","ListItemIcon","ListItemText","primary","ShowChart","BrightnessHigh","Brightness5","Whatshot","Waves","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6123e51b.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  CardActions,\n  List,\n  ListItem,\n  ListItemText,\n  TextField,\n  Avatar,\n  ListItemIcon\n} from '@material-ui/core'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport {\n  ShowChart,\n  WbSunny,\n  BrightnessHigh,\n  Waves,\n  Brightness5,\n  Whatshot\n} from '@material-ui/icons'\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      data: {},\n      item: {\n        weather: '',\n        temperature: '',\n        temperature_max: '',\n        temperature_min: '',\n        icon: '',\n        humidity: '',\n        speed: ''\n      },\n      placeName: ''\n    }\n    this.apiToken = '6f8fd58a3ea6d25ae6f70c3d003d1e66'\n  }\n\n  async getData (id) {\n    const getJSON = (uri, options) =>\n      window\n        .fetch(uri, options)\n        .then(res => res.json())\n        .then(json => ({\n          weather: json.weather[0].description,\n          icon: json.weather[0].icon,\n          temperature: json.main.temp,\n          temperature_max: json.main.temp_max,\n          temperature_min: json.main.temp_min,\n          humidity: json.main.humidity,\n          speed: json.wind.speed\n        }))\n\n    const options = { method: 'get' }\n    const uri =\n      'http://api.openweathermap.org/data/2.5/weather?lang=ja&units=metric'\n    const params = `&appid=${this.apiToken}&id=${id}`\n    const data = await getJSON(uri + params, options)\n    this.setState({ item: data })\n  }\n\n  handleUpdate (event) {\n    const index = event.target.dataset.optionIndex\n    const place = this.state.data[index]\n    this.getData(place.id)\n    this.setState({ placeName: place.name })\n  }\n\n  componentDidMount () {\n    this.setState({\n      data: [\n        { name: 'ニューヨーク', id: 5128581 },\n        { name: '東京', id: 1850147 },\n        { name: '上海', id: 1796236 },\n        { name: 'カイロ', id: 360630 },\n        { name: 'ナイロビ', id: 184745 },\n        { name: 'パリ', id: 2988507 },\n        { name: '沖縄', id: 1854345 },\n        { name: 'ブラジリア', id: 3469058 },\n        { name: 'サンフランシスコ', id: 3837675 },\n        { name: 'ブエノスアイレス', id: 3435910 },\n        { name: 'パナマ', id: 3703430 },\n        { name: 'ロサンゼルス', id: 5368361 },\n        { name: 'カリフォルニアシティ', id: 5332748 },\n        { name: 'ベルリン', id: 2950159 },\n        { name: 'バルセロナ', id: 3128760 },\n        { name: 'サルバドール', id: 3450554 },\n        { name: 'リオデジャネイロ', id: 3451190 },\n        { name: 'サンパウロ', id: 3448439 },\n        { name: 'サンティアゴ', id: 3871336 },\n        { name: 'プエルトモント', id: 3874960 },\n        { name: 'バンクーバー', id: 6173331 },\n        { name: 'ハミルトン', id: 4513583 },\n        { name: 'イスタンブール', id: 745042 },\n        { name: 'キエフ', id: 703446 },\n        { name: 'ストックホルム', id: 2673730 },\n        { name: 'サマラ', id: 499099 },\n        { name: 'ジェッダ', id: 105343 },\n        { name: 'モガディシュ', id: 53654 },\n        { name: 'ブライア', id: 3374333 },\n        { name: 'カラカス', id: 3646738 },\n        { name: 'マナウス', id: 3663517 },\n        { name: 'リマ', id: 3936456 },\n        { name: 'カリ', id: 3687925 },\n        { name: 'ヒューストン', id: 4699066 },\n        { name: 'トロント', id: 6167865 },\n        { name: 'イスタパラパ', id: 3526683 },\n        { name: 'カナーク', id: 3831208 },\n        { name: 'モールドベイ', id: 6079446 },\n        { name: 'イザクセン', id: 5984185 },\n        { name: 'バロー', id: 5880054 },\n        { name: 'ジュノー', id: 5554072 },\n        { name: 'ダッチハーバー', id: 5861117 },\n        { name: 'エルドラド', id: 3429790 },\n        { name: 'デルタナ', id: 7262847 },\n        { name: 'シアトル', id: 5809844 },\n        { name: 'アバディーン', id: 5785243 },\n        { name: 'ジェドウェイ', id: 5986080 },\n        { name: 'サンノゼ', id: 5392171 },\n        { name: 'モバイル', id: 4076598 },\n        { name: 'ダラス', id: 4684904 },\n        { name: 'フェニックス', id: 5308655 },\n        { name: 'カンザスシティ', id: 4393217 },\n        { name: 'シカゴ', id: 4887398 },\n        { name: 'コロンビア', id: 4381982 },\n        { name: 'ピエール', id: 5767918 },\n        { name: 'リンカーン', id: 5072006 },\n        { name: 'アラル', id: 1529641 },\n        { name: 'ロンドン', id: 2643741 }\n      ]\n    })\n  }\n\n  render () {\n    console.log(this.state)\n    return (\n      <Card>\n        <div class='Card'>\n          <CardHeader title='世界の都市の天気情報' />\n        </div>\n        <CardActions>\n          <SelectorView\n            data={this.state.data}\n            handleUpdate={this.handleUpdate.bind(this)}\n          />\n        </CardActions>\n        <CardContent>\n          <ListView item={this.state.item} />\n        </CardContent>\n      </Card>\n    )\n  }\n}\n\nconst SelectorView = props => (\n  <Autocomplete\n    options={props.data}\n    getOptionLabel={option => option.name}\n    renderInput={params => (\n      <TextField\n        {...params}\n        label='都市を選択'\n        variant='outlined'\n        style={{ width: 300 }}\n        fullWidth\n      />\n    )}\n    onChange={props.handleUpdate}\n  />\n)\n\nconst ListView = props => {\n  const {\n    weather,\n    icon,\n    temperature,\n    temperature_max,\n    temperature_min,\n    humidity,\n    speed\n  } = props.item\n  const formatTemperature = temperature ? `${temperature}℃` : ''\n  const formatTemperature_max = temperature_max ? `${temperature_max}℃` : ''\n  const formatTemperature_min = temperature_min ? `${temperature_min}℃` : ''\n  const formatHumidity = humidity ? `${humidity}%` : ''\n  const formatSpeed = speed ? `${speed}m/s` : ''\n  const path = `http://openweathermap.org/img/wn/${icon}.png`\n  const image = icon ? <Avatar src={path} alt={weather} /> : <WbSunny />\n  console.log('props', props)\n  return (\n    <List>\n      <div class='data'>\n        <ListItem>\n          <ListItemIcon>{image}</ListItemIcon>\n          <ListItemText primary={weather} />\n          天気\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <ShowChart />\n          </ListItemIcon>\n          <ListItemText primary={formatTemperature} />\n          気温\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <BrightnessHigh />\n          </ListItemIcon>\n          <ListItemText primary={formatTemperature_max} />\n          最高気温\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <Brightness5 />\n          </ListItemIcon>\n          <ListItemText primary={formatTemperature_min} />\n          最低気温\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <Whatshot />\n          </ListItemIcon>\n          <ListItemText primary={formatHumidity} />\n          湿度\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <Waves />\n          </ListItemIcon>\n          <ListItemText primary={formatSpeed} />\n          風速\n        </ListItem>\n      </div>\n    </List>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}